#!/usr/bin/env python3
"""
claude blame - Find which Claude instance wrote that shit!

A git blame for Claude conversations. Takes a git commit hash and searches through
Anthropic's conversations.json export to find which conversation(s) mention it.
Opens a direct portal to the responsible Claude instance(s).
"""

import json
import sys
import re
from datetime import datetime
from pathlib import Path
import argparse
from typing import List, Dict, Tuple, Optional

# ANSI color codes for fancy output
RESET = '\033[0m'
BOLD = '\033[1m'
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
MAGENTA = '\033[95m'
CYAN = '\033[96m'

# ASCII art header
HEADER = f"""{MAGENTA}
   _____ _                 _        ____  _                      
  / ____| |               | |      |  _ \\| |                     
 | |    | | __ _ _   _  __| | ___  | |_) | | __ _ _ __ ___   ___ 
 | |    | |/ _` | | | |/ _` |/ _ \\ |  _ <| |/ _` | '_ ` _ \\ / _ \\
 | |____| | (_| | |_| | (_| |  __/ | |_) | | (_| | | | | | |  __/
  \\_____|_|\\__,_|\\__,_|\\__,_|\\___| |____/|_|\\__,_|_| |_| |_|\\___|
                                                                   
{CYAN}  🔍 Finding which Claude instance wrote that shit! 🔍{RESET}
"""

def find_git_commit_in_content(content_items: List[Dict], commit_hash: str) -> Optional[Dict]:
    """
    Search through content items for git commit commands and their results.
    Returns info about the commit if found.
    """
    commit_info = None
    
    for i, item in enumerate(content_items):
        # Look for git commit tool use
        if item.get('type') == 'tool_use' and item.get('name') == 'koding-stable:BashTool':
            command = item.get('input', {}).get('command', '')
            
            # Check if this is a git commit command
            if 'git commit' in command:
                # Look for the corresponding tool_result
                if i + 1 < len(content_items) and content_items[i + 1].get('type') == 'tool_result':
                    result = content_items[i + 1]
                    
                    # Extract the output text
                    result_content = result.get('content', [])
                    if result_content and isinstance(result_content, list) and len(result_content) > 0:
                        output_text = result_content[0].get('text', '')
                        
                        # Search for commit hash in the output
                        # Look for patterns like [main 3f1747d] or [branch abc123def]
                        # Also handle [main (root-commit) 3f1747d]
                        hash_pattern = re.compile(r'\[[\w\-/]+(?:\s+\([^)]+\))?\s+([a-f0-9]{7,40})\]')
                        match = hash_pattern.search(output_text)
                        
                        if match:
                            found_hash = match.group(1)
                            # Check if this matches our search (partial match)
                            if commit_hash.lower() in found_hash.lower() or found_hash.lower().startswith(commit_hash.lower()[:7]):
                                commit_info = {
                                    'command': command,
                                    'output': output_text,
                                    'hash': found_hash,
                                    'tool_index': i
                                }
                                break
    
    return commit_info

def extract_assistant_turn_text(content_items: List[Dict]) -> str:
    """Extract the complete text from an assistant turn."""
    text_parts = []
    
    for item in content_items:
        if item.get('type') == 'text':
            text_parts.append(item.get('text', ''))
        elif item.get('type') == 'thinking':
            # Include thinking blocks if present
            thinking_text = item.get('text', '')
            if thinking_text:
                text_parts.append(f"[Thinking: {thinking_text[:100]}...]")
    
    return '\n'.join(text_parts)

def format_timestamp(timestamp: str) -> str:
    """Format ISO timestamp to human readable."""
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except:
        return timestamp

def search_conversations(conversations_path: Path, commit_hash: str) -> List[Dict]:
    """Search through conversations.json for commit hash mentions."""
    
    print(f"\n{YELLOW}🔍 Searching for commit: {BOLD}{commit_hash}{RESET}")
    
    try:
        with open(conversations_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"{RED}❌ Error: conversations.json not found at {conversations_path}{RESET}")
        print(f"{YELLOW}💡 Tip: Export your data from claude.ai and specify the path{RESET}")
        return []
    except json.JSONDecodeError:
        print(f"{RED}❌ Error: Invalid JSON in conversations file{RESET}")
        return []
    
    results = []
    total_conversations = len(data)
    
    print(f"{BLUE}📊 Analyzing {total_conversations} conversations...{RESET}\n")
    
    for conv_idx, conversation in enumerate(data):
        conv_uuid = conversation.get('uuid', 'unknown')
        conv_name = conversation.get('name', 'Untitled')
        created_at = conversation.get('created_at', '')
        updated_at = conversation.get('updated_at', '')
        
        
        messages = conversation.get('chat_messages', [])  # Note: changed from 'messages' to 'chat_messages'
        
        for msg_idx, message in enumerate(messages):
            sender = message.get('sender', '')
            
            # Only check assistant messages for git commits
            if sender == 'assistant':
                content_items = message.get('content', [])
                
                # Search for git commit in content
                commit_info = find_git_commit_in_content(content_items, commit_hash)
                
                if commit_info:
                    # Extract the full assistant turn text
                    turn_text = extract_assistant_turn_text(content_items)
                    
                    results.append({
                        'conversation': {
                            'uuid': conv_uuid,
                            'name': conv_name,
                            'created_at': created_at,
                            'updated_at': updated_at,
                            'url': f"https://claude.ai/chat/{conv_uuid}"
                        },
                        'message': {
                            'uuid': message.get('uuid', 'unknown'),
                            'index': msg_idx,
                            'turn_text': turn_text,
                            'created_at': message.get('created_at', '')
                        },
                        'commit': commit_info
                    })
    
    print(f"\n{GREEN}✅ Search complete!{RESET}")
    return results

def display_results(results: List[Dict], commit_hash: str):
    """Display search results in a beautiful format."""
    
    if not results:
        print(f"\n{RED}😔 No Claude instances found guilty of commit {commit_hash}{RESET}")
        print(f"{YELLOW}💭 Either they're innocent or they covered their tracks well...{RESET}")
        return
    
    print(f"\n{GREEN}🎯 Found {len(results)} Claude instance(s) responsible!{RESET}\n")
    print(f"{RED}{'='*70}{RESET}")
    
    for idx, result in enumerate(results, 1):
        conv = result['conversation']
        msg = result['message']
        commit = result['commit']
        
        print(f"\n{BOLD}{MAGENTA}📍 Instance #{idx}{RESET}")
        print(f"{CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━{RESET}")
        
        print(f"\n{YELLOW}🏷️  Conversation:{RESET} {conv['name']}")
        print(f"{YELLOW}🆔 Conversation UUID:{RESET} {conv['uuid']}")
        print(f"{YELLOW}📅 Created:{RESET} {format_timestamp(conv['created_at'])}")
        print(f"{YELLOW}🔄 Updated:{RESET} {format_timestamp(conv['updated_at'])}")
        
        print(f"\n{GREEN}📝 Commit Details:{RESET}")
        print(f"  {CYAN}Commit Hash:{RESET} {commit['hash']}")
        print(f"  {CYAN}Git Command:{RESET} {commit['command'][:100]}...")
        
        print(f"\n{GREEN}💬 Message Info:{RESET}")
        print(f"  {CYAN}Message UUID:{RESET} {msg['uuid']}")
        print(f"  {CYAN}Message Index:{RESET} {msg['index']}")
        print(f"  {CYAN}Created At:{RESET} {format_timestamp(msg['created_at'])}")
        
        print(f"\n{GREEN}📄 Assistant Turn Preview:{RESET}")
        turn_preview = msg['turn_text'][:500].replace('\n', '\n  ')
        print(f"  {turn_preview}...")
        
        print(f"\n{YELLOW}🔗 Portal URL:{RESET} {BLUE}{conv['url']}{RESET}")
    
    print(f"\n{RED}{'='*70}{RESET}")
    print(f"\n{MAGENTA}🚪 Portal(s) ready! Click any URL above to confront the responsible Claude(s).{RESET}")
    print(f"{CYAN}💭 \"With great commits comes great responsibility\" - Uncle Claude{RESET}\n")

def main():
    parser = argparse.ArgumentParser(
        description="Find which Claude instance wrote that commit!",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  claude-blame abc123f
  claude-blame abc123f --conversations ~/Downloads/conversations.json
  claude-blame --full abc123f456def789  # Use full hash
        """
    )
    
    parser.add_argument('commit_hash', help='Git commit hash (partial or full)')
    parser.add_argument(
        '--conversations', '-c',
        type=Path,
        default=Path.home() / 'Downloads' / 'conversations.json',
        help='Path to conversations.json export (default: ~/Downloads/conversations.json)'
    )
    parser.add_argument(
        '--full', '-f',
        action='store_true',
        help='Search for full commit hash instead of first 7 characters'
    )
    
    args = parser.parse_args()
    
    # Show header
    print(HEADER)
    
    # Validate commit hash
    if not args.full and len(args.commit_hash) < 7:
        print(f"{RED}❌ Error: Commit hash too short. Need at least 7 characters.{RESET}")
        sys.exit(1)
    
    # Search for the commit
    commit_to_search = args.commit_hash if args.full else args.commit_hash[:7]
    results = search_conversations(args.conversations, commit_to_search)
    
    # Display results
    display_results(results, args.commit_hash)

if __name__ == "__main__":
    main()
